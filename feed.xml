<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://aswinkumar.me/feed.xml" rel="self" type="application/atom+xml"/><link href="https://aswinkumar.me/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-10-28T07:39:30+00:00</updated><id>https://aswinkumar.me/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Getting Started with MuJoCo - Part 2</title><link href="https://aswinkumar.me/blog/2020/mujoco-part-1/" rel="alternate" type="text/html" title="Getting Started with MuJoCo - Part 2"/><published>2020-05-18T04:49:51+00:00</published><updated>2020-05-18T04:49:51+00:00</updated><id>https://aswinkumar.me/blog/2020/mujoco-part-1</id><content type="html" xml:base="https://aswinkumar.me/blog/2020/mujoco-part-1/"><![CDATA[<p>Hi ! Welcome to my Blog on MuJoCo. The Aim of this blog is to get people on-board MuJoCo in the least time possible. I am a Sophomore at a University, my Programming experience has been developed by looking at multiple example and reading code, but when it came to MuJoCo, the Documentation was very thorough yet i felt like i was lacking the basic skills to understand a lot of them initially and was very intimitated when i first came across it. So I set myself a goal to write MuJoCo blogs which would help people who love explanations through examples. <strong>But do remember , the blog is supposed to set a starting point and break the ice for people who do not have any major first hand experiences in robotic modelling , i refer the XML Reference all the time and once you get familiar and comfortable with the basic , do use the documentation to make sure you are exploiting all the features of MuJoCo.</strong></p> <p>In this post , Let us cover the Following :</p> <ul> <li>Playing with the MuJoCo Simulator</li> <li>Hello mujoco-py</li> </ul> <p>If you have not seen my Part 1 of the post , Do look at it for the basics.</p> <h1 id="playing-with-the-mujoco-simulator">Playing with the MuJoCo Simulator</h1> <h2 id="running-the-simulator">Running the Simulator</h2> <p>We saw about the installation of mujoco and mujoco-py in the last blog , keeping in mind the same install location , let us run the Simulator with the inbuilt Humanoid Model.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># cd to the mujoco directory</span>
<span class="nv">$ </span><span class="nb">cd</span> ~/.mujoco/mujoco200/bin
<span class="c"># Simulate the Humanoid Model example</span>
<span class="nv">$ </span>./simulate ../model/humanoid.xml
</code></pre></div></div> <h5 id="for-help---toggle-f1-key">For Help - Toggle <code class="language-plaintext highlighter-rouge">F1</code> Key</h5> <p>Now we have the simulator window opened up , Let us now see some basic actions that we can perform.</p> <h2 id="basics">Basics</h2> <h4 id="change-theme--size-and-ui-layout">Change Theme , Size and UI Layout</h4> <p>In the Left Side of the windows , We have the UI tab , where we have a lot of options to control the looks of the simulations window such as <code class="language-plaintext highlighter-rouge">Spacing</code>, <code class="language-plaintext highlighter-rouge">Control</code> , <code class="language-plaintext highlighter-rouge">Font</code> Here is an Example to Change the Theme of the Window.</p> <p align="center"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mujoco-part-1/theme.gif" sizes="95vw"/> <img src="/assets/img/mujoco-part-1/theme.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </p> <h4 id="pan--rotate-and-zoom">Pan , Rotate and Zoom</h4> <p>These are the Following mouse functions :</p> <ul> <li>Left Click and move your mouse to Rotate.</li> <li>Middle Click and Moving your mouse Zooms in and out</li> <li>Right Click and mouse to PAN</li> </ul> <p align="center"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mujoco-part-1/pzr.gif" sizes="95vw"/> <img src="/assets/img/mujoco-part-1/pzr.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </p> <h4 id="joint-and-control">Joint and Control</h4> <p>We can define sensors and actuators in our models, we will see how to do that in the upcoming blog , but to control and see the output values , you can look at the Right UI which has the Joint and Control Tab.</p> <p align="center"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mujoco-part-1/joincont.gif" sizes="95vw"/> <img src="/assets/img/mujoco-part-1/joincont.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </p> <h4 id="force-and-torue">Force and Torue</h4> <p>You can Apply force and Torque to the bodies in the model , to do so , you will have to :</p> <ul> <li>Select the Body where you want to apply force or Torque <code class="language-plaintext highlighter-rouge">Double Click</code> , the body gets highlighted</li> <li>Press <code class="language-plaintext highlighter-rouge">Crtl + Left Click</code> and Move your mouse to Apply Torque</li> <li>PRess <code class="language-plaintext highlighter-rouge">Crtl + Right Click</code> and Move your mouse to Apply Force to the Body</li> </ul> <p align="center"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mujoco-part-1/fortor.gif" sizes="95vw"/> <img src="/assets/img/mujoco-part-1/fortor.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </p> <h4 id="labelling">Labelling</h4> <p>We can Label bodies and geometry in our <code class="language-plaintext highlighter-rouge">XML</code> file so that we can keep track of them especially for complex models.</p> <p>To view labels , you can go under the Rendering Tab in the Left UI and scroll through the Label options to select whichever you want.</p> <p>**Labelling - Body **</p> <p align="center"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mujoco-part-1/lab_body.gif" sizes="95vw"/> <img src="/assets/img/mujoco-part-1/lab_body.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </p> <p>**Labelling - Geometry **</p> <p align="center"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mujoco-part-1/lab_geom.gif" sizes="95vw"/> <img src="/assets/img/mujoco-part-1/lab_geom.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </p> <h4 id="frame">Frame</h4> <p>We can take a Look at the Frame Axis of Bodies , Geometries, Sites etc…</p> <p>It can be found next to the Label Options.</p> <p><strong>Frame - Worldbody</strong></p> <p align="center"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mujoco-part-1/frame_world.gif" sizes="95vw"/> <img src="/assets/img/mujoco-part-1/frame_world.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </p> <p><strong>Frame - Body</strong></p> <p align="center"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mujoco-part-1/frame_body.gif" sizes="95vw"/> <img src="/assets/img/mujoco-part-1/frame_body.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </p> <p><strong>Frame - Geometry</strong></p> <p align="center"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mujoco-part-1/frame_geom.gif" sizes="95vw"/> <img src="/assets/img/mujoco-part-1/frame_geom.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </p> <h4 id="model-elements">Model Elements</h4> <p>Under the Rendering Tab , We also have other options to play with , Some of are display of Center of Mass , Display of Contact points , Contact Forces etc…</p> <p>You can toggle them to turn the features on and off.</p> <p><strong>Model - Display Center of mass</strong></p> <p align="center"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mujoco-part-1/model_COM.gif" sizes="95vw"/> <img src="/assets/img/mujoco-part-1/model_COM.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </p> <p><strong>Model - Contact Force</strong></p> <p align="center"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mujoco-part-1/model_com_force.gif" sizes="95vw"/> <img src="/assets/img/mujoco-part-1/model_com_force.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </p> <p><strong>Model - Display Actuators</strong></p> <p align="center"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mujoco-part-1/model_actuator.gif" sizes="95vw"/> <img src="/assets/img/mujoco-part-1/model_actuator.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </p> <h4 id="opengl-effects">OpenGL Effects</h4> <p>This has nothing to do with the model and this provides some cool OpenGL Features , These Features are also placed under Rendering Tab.</p> <p><strong>OpenGL - Wireframe Mode</strong></p> <p align="center"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mujoco-part-1/opengl_wireframe.gif" sizes="95vw"/> <img src="/assets/img/mujoco-part-1/opengl_wireframe.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </p> <p><strong>OpenGL - Reflections and Shadows</strong></p> <p align="center"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mujoco-part-1/opengl_reflshad.gif" sizes="95vw"/> <img src="/assets/img/mujoco-part-1/opengl_reflshad.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </p> <h1 id="hello-mujoco-py">Hello mujoco-py</h1> <p>Let us now , write the Hello world of mujoco-py , the installation instructions ( Using pip and Source build ) are present in the previous page and you can refer them for installation.</p> <p>With that , let’s write the first program</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a new file</span>
<span class="nv">$ </span><span class="nb">touch </span>hello_mujoco_py.py

<span class="c"># Edit the File </span>
<span class="nv">$ </span>nano hello_mujoco_py.py
</code></pre></div></div> <p>Inside the Python file , let us now write out code for the program.</p> <p>This is the code , The Code has explanations for what they. perform.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Import required libraries
</span><span class="kn">import</span> <span class="n">mujoco_py</span>
<span class="kn">import</span> <span class="n">os</span>

<span class="c1"># Get the mujoco-py path and Load the XML file
</span><span class="n">mj_path</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">mujoco_py</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="nf">discover_mujoco</span><span class="p">()</span>
<span class="n">xml_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">mj_path</span><span class="p">,</span> <span class="sh">'</span><span class="s">my_files</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">hello_mujoco.xml</span><span class="sh">'</span><span class="p">)</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">mujoco_py</span><span class="p">.</span><span class="nf">load_model_from_path</span><span class="p">(</span><span class="n">xml_path</span><span class="p">)</span>

<span class="c1"># Setup the simulator and viewer
</span><span class="n">sim</span> <span class="o">=</span> <span class="n">mujoco_py</span><span class="p">.</span><span class="nc">MjSim</span><span class="p">(</span><span class="n">model</span><span class="p">)</span>
<span class="n">viewer</span> <span class="o">=</span> <span class="n">mujoco_py</span><span class="p">.</span><span class="nc">MjViewer</span><span class="p">(</span><span class="n">sim</span><span class="p">)</span>

<span class="c1"># Infinite Loop
</span><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="c1"># Print (x,y,z) positions and Quaternions of the system.
</span>    <span class="nf">print</span><span class="p">(</span><span class="n">sim</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">qpos</span><span class="p">)</span>
    <span class="c1"># Simulate by one step and render it on Screen. 
</span>    <span class="n">sim</span><span class="p">.</span><span class="nf">step</span><span class="p">()</span>
    <span class="n">viewer</span><span class="p">.</span><span class="nf">render</span><span class="p">()</span>

</code></pre></div></div> <p>Now , if we run this , We will get a New window which will render the Simulation and the Terminal on which you execute the command will print the qpos values.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python3 hello_mujoco_py.py
</code></pre></div></div> <p>Output Window :</p> <p align="center"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mujoco-part-1/mujoco_py.gif" sizes="95vw"/> <img src="/assets/img/mujoco-part-1/mujoco_py.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </p> <h2 id="bonus-">Bonus :</h2> <p>I mentioned about Quaternions in the Code, But again when i first came across it , I did not understand what they meant or how they work , But i found this video which described quaternions very beautifully.</p> <p><a href="https://www.youtube.com/watch?v=zjMuIxRvygQ">Quaternions and 3d rotation, explained interactively - 3Blue1Brown</a></p> <p>But if you want the output in Euler Angles or in other 3D axis frames. You can use the script here to do so. It is part of OpenAI Environment</p> <p><a href="https://github.com/openai/gym/blob/master/gym/envs/robotics/rotations.py">gym/rotations.py</a></p>]]></content><author><name>Aswinkumar</name></author><category term="[&quot;Robotics&quot;, &quot;MuJoCo&quot;, &quot;MuJoCo-Py&quot;, &quot;OpenAI&quot;]"/><summary type="html"><![CDATA[Hi ! Welcome to my Blog on MuJoCo. The Aim of this blog is to get people on-board MuJoCo in the least time possible. I am a Sophomore at a University, my Programming experience has been developed by looking at multiple example and reading code, but when it came to MuJoCo, the Documentation was very thorough yet i felt like i was lacking the basic skills to understand a lot of them initially and was very intimitated when i first came across it. So I set myself a goal to write MuJoCo blogs which would help people who love explanations through examples. But do remember , the blog is supposed to set a starting point and break the ice for people who do not have any major first hand experiences in robotic modelling , i refer the XML Reference all the time and once you get familiar and comfortable with the basic , do use the documentation to make sure you are exploiting all the features of MuJoCo.]]></summary></entry><entry><title type="html">Getting Started with MuJoCo</title><link href="https://aswinkumar.me/blog/2020/mujoco-part-0/" rel="alternate" type="text/html" title="Getting Started with MuJoCo"/><published>2020-05-15T04:49:51+00:00</published><updated>2020-05-15T04:49:51+00:00</updated><id>https://aswinkumar.me/blog/2020/mujoco-part-0</id><content type="html" xml:base="https://aswinkumar.me/blog/2020/mujoco-part-0/"><![CDATA[<p>Hi ! Welcome to my Blog on MuJoCo. The Aim of this blog is to get people on-board MuJoCo in the least time possible. I am a Sophomore at a University, my Programming experience has been developed by looking at multiple example and reading code, but when it came to MuJoCo, the Documentation was very thorough yet i felt like i was lacking the basic skills to understand a lot of them initially and was very intimitated when i first came across it. So I set myself a goal to write MuJoCo blogs which would help people who love explanations through examples. <strong>But do remember , the blog is supposed to set a starting point and break the ice for people who do not have any major first hand experiences in robotic modelling , i refer the XML Reference all the time and once you get familiar and comfortable with the basic , do use the documentation to make sure you are exploiting all the features of MuJoCo.</strong></p> <p>In this post , Let us cover the Following :</p> <ul> <li>What is MuJoCo ?</li> <li>How a Model is defined in MuJoCo ?</li> <li>Intro to mujoco-py</li> <li>mujoco-py Installtion</li> <li>Hello World in MuJoCo !</li> </ul> <h1 id="what-is-mujoco-">What is MuJoCo ?</h1> <p>MuJoCo stands for <strong>Mu</strong>lti-<strong>Jo</strong>int dynamics with <strong>Co</strong>ntact.</p> <p>MuJoCo is a physics engine aiming to facilitate research and development in robotics, biomechanics, graphics and animation, and other areas where fast and accurate simulation is needed. It offers a unique combination of speed, accuracy and modeling power, yet it is not merely a better simulator.</p> <p><a href="http://www.mujoco.org/image/home/mujocodemo.mp4">Checkout this video from MuJoCo</a></p> <h3 id="licenses">Licenses</h3> <p>You can head over to <a href="https://www.roboti.us/license.html">MuJoCo License page</a> and obtain a license to use their software. If you are a student , then you get 1 year if MuJoCo for free.</p> <h1 id="how-is-a-model-defined-in-mujoco-">How is a Model defined in MuJoCo ?</h1> <p>The user specifies models in the native MJCF format - which is an XML file format designed to be as human readable and editable as possible. URDF model files can also be loaded.</p> <p>Unified Robot Description Format (URDF) is a popular XML file format in which many robots have been modeled.</p> <p>In this blog , we will discuss more about MJCF and not discuss about URDF format.</p> <h1 id="mujoco-py">mujoco-py</h1> <h4 id="documentation-for-mujoco-py"><a href="https://openai.github.io/mujoco-py/build/html/index.html">Documentation for mujoco-py</a></h4> <h4 id="github"><a href="https://github.com/openai/mujoco-py">GitHub</a></h4> <p><code class="language-plaintext highlighter-rouge">mujoco-py</code> is a library which allows using MuJoCo from Python3.</p> <p>This is particularly very useful when we design Control Systems or AI agents for robots. mujoco-py was developed by <a href="https://openai.com">OpenAI</a>.</p> <p>You can install <code class="language-plaintext highlighter-rouge">mujoco-py</code> by using pip</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ pip3 install -U 'mujoco-py&lt;2.1,&gt;=2.0'
</code></pre></div></div> <h3 id="install-from-source">Install from source</h3> <p>Clone this repository and move into the directory.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:openai/mujoco-py.git
cd mujoco-py
</code></pre></div></div> <p>Make sure your setup tools are up to date</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python -m pip install --upgrade setuptools
</code></pre></div></div> <p>Install both regular and dev dependencies for mujoco-py</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install -r requirements.txt
pip install -r requirements.dev.txt
</code></pre></div></div> <p>Now install mujoco-py</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python setup.py install
</code></pre></div></div> <h4 id="post-installation-steps">Post-Installation Steps</h4> <ul> <li> <p>Download the MuJoCo version 2.0 binaries for Linux or OSX.</p> </li> <li> <p>Unzip the downloaded mujoco200 directory into <code class="language-plaintext highlighter-rouge">~/.mujoco/mujoco200</code>, and place your license key (the <code class="language-plaintext highlighter-rouge">mjkey.txt</code> file from your email) at <code class="language-plaintext highlighter-rouge">~/.mujoco/mjkey.txt</code>.</p> </li> </ul> <p>If everything completes successfully you should be able to run the examples</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python examples<span class="se">\b</span>ody_interaction.py
</code></pre></div></div> <h2 id="hello-world-in-mujoco">Hello World in MuJoCo</h2> <p>Great , with all the above steps performed, let’s go on build our first model.</p> <p>Now , Let’s verify we are in the correct directory.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> ~/.mujoco/mujoco200/  
<span class="nv">$ </span><span class="nb">pwd</span>
/Users/~user~/.mujoco/mujoco200
</code></pre></div></div> <p>Let us now create a new folder where we will save our models and python files.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir </span>my_files
</code></pre></div></div> <p>Create a new model file in this folder and add a few lines to it.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">touch </span>my_files/hello_mujoco.xml
</code></pre></div></div> <p>Add the following lines to it and save it.</p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;mujoco&gt;</span>
   <span class="nt">&lt;worldbody&gt;</span>
      <span class="nt">&lt;light</span> <span class="na">diffuse=</span><span class="s">".5 .5 .5"</span> <span class="na">pos=</span><span class="s">"0 0 3"</span> <span class="na">dir=</span><span class="s">"0 0 -1"</span><span class="nt">/&gt;</span>    
      <span class="nt">&lt;geom</span> <span class="na">type=</span><span class="s">"plane"</span> <span class="na">size=</span><span class="s">"1 1 0.1"</span> <span class="na">rgba=</span><span class="s">".9 0 0 1"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;body</span> <span class="na">pos=</span><span class="s">"0 0 1"</span><span class="nt">&gt;</span>
         <span class="nt">&lt;joint</span> <span class="na">type=</span><span class="s">"free"</span><span class="nt">/&gt;</span>
         <span class="nt">&lt;geom</span> <span class="na">type=</span><span class="s">"box"</span> <span class="na">size=</span><span class="s">".1 .2 .3"</span> <span class="na">rgba=</span><span class="s">"0 .9 0 1"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;/body&gt;</span>
   <span class="nt">&lt;/worldbody&gt;</span>
<span class="nt">&lt;/mujoco&gt;</span>
</code></pre></div></div> <p>Let us now simulate this and then go back to seeing them in detail line-by-line.</p> <p>To simulate this do the following :</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> /bin <span class="c"># Change to directory containing the binaries</span>
<span class="nv">$ </span>./simnulate ../my_files/hello_mujoco.xml
</code></pre></div></div> <p>Voila !! Now you have an OpenGL window pop-up with the animation of the falling cube.</p> <p align="center"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mujoco-part-0/hello_mujoco.gif" sizes="95vw"/> <img src="/assets/img/mujoco-part-0/hello_mujoco.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </p> <p>Now Let us see in brief about what the lines mean , for which we will extensively use the <a href="http://www.mujoco.org/book/XMLreference.html">documentation</a> provided by MuJoCo</p> <h4 id="mujoco-tag"><code class="language-plaintext highlighter-rouge">&lt;mujoco&gt;</code> Tag</h4> <p>Every MJCF files starts with <code class="language-plaintext highlighter-rouge">&lt;mujoco&gt;</code> tag and ends with <code class="language-plaintext highlighter-rouge">&lt;/mujoco&gt;</code> , Why should it start and end this way you may ask , given we are using mujoco , isn’t all of it be MuJoCo code ? why does the compiler require us to specific it ?</p> <p>Because this helps us identify between URDF and MJCF files, Also we can use MuJoCo for <a href="http://www.mujoco.org/book/modeling.html#CURDF">some parts for URDF file</a>.</p> <h4 id="worldbody-tag"><code class="language-plaintext highlighter-rouge">&lt;worldbody&gt;</code> Tag</h4> <p>The element worldbody is used for the top-level body, while the element body is used for all other bodies. We define the worldbody tag to describe our model.</p> <p><a href="http://www.mujoco.org/book/XMLreference.html#body">Reference</a></p> <h4 id="light"><code class="language-plaintext highlighter-rouge">&lt;light&gt;</code></h4> <p>Here we describe a fix light source in the world body , you can also create light which moves with the body , when the <code class="language-plaintext highlighter-rouge">&lt;light&gt;</code> tag is nested inside the body</p> <ul> <li> <p>Diffuse ( r g b ) : Here we define how the reflection of light to all directions at a point, Other Paramteres Include : Ambient and Specular …. Check this out <a href="https://www.quora.com/What-is-the-difference-between-Ambient-Diffuse-and-Specular-Light-in-OpenGL-Figures-for-illustration-are-encouraged#">What is the difference between Ambient, Diffuse, and Specular Light in OpenGL?</a></p> </li> <li> <p>pos ( x y z ) : Defines the X , Y , Z coordinate of the light source</p> </li> <li> <p>dir ( x y z ) : Defines the direction of the light</p> </li> </ul> <h4 id="geom"><code class="language-plaintext highlighter-rouge">&lt;geom&gt;</code></h4> <p>Here we describe of the geometry of the body , and in this specific case , we describe a plane with length and breath of 1 unity and a thickness of 0.1 , If you see the Documentation, you see <code class="language-plaintext highlighter-rouge">&lt;geom&gt;</code> nested under <code class="language-plaintext highlighter-rouge">&lt;body&gt;</code> , and in this case , the plane we described is a part of the world body.</p> <ul> <li> <p>size ( x y z ) : x , y , z sizes of the body.</p> </li> <li> <p>rgba ( r g b a ) : Color of the geometry - Red , Blue , Green and Alpha Channel values from 0 to 1</p> </li> </ul> <p>Bonus : Recording function &amp; Converting to GIF</p> <h4 id="body"><code class="language-plaintext highlighter-rouge">&lt;body&gt;</code></h4> <p>Here we describe a child body under the parent of worldbody , here we use <code class="language-plaintext highlighter-rouge">pos</code> to define the position of the body frame.</p> <p>There are other parameters which are listed in the Documentation.</p> <h4 id="joint"><code class="language-plaintext highlighter-rouge">&lt;joint&gt;</code></h4> <p>We use <code class="language-plaintext highlighter-rouge">&lt;joint&gt;</code> to describe to the motion degress of freedom between the defined body and it’s parents , in this case the worldbody.</p> <ul> <li>type : [free, ball, slide, hinge], “hinge” - Uses Hinge when type is not specified. - free joint allow 3 axis of translation and 3 axis of rotation.</li> </ul> <p>With this we can conclude the first blog post on MuJoCo.</p> <h3 id="bonus">Bonus</h3> <p>I use the record function to record the videos such as the GIF above.</p> <p>The record function is also part of the <code class="language-plaintext highlighter-rouge">bin</code> folder</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./record ../my_files/hello_mujoco.xml 5 60 rgb.out
<span class="nv">$ </span>ffmpeg <span class="nt">-f</span> rawvideo <span class="nt">-pixel_format</span> rgb24 <span class="nt">-video_size</span> 640x480 <span class="nt">-framerate</span> 60 <span class="nt">-i</span> rgb.out <span class="nt">-vf</span> <span class="s2">"vflip"</span> video.mp4
</code></pre></div></div> <p>This would give the output as <code class="language-plaintext highlighter-rouge">video.mp4</code></p> <p>I used this script for this blog to create GIFs easily</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/sh</span>

<span class="nv">palette</span><span class="o">=</span><span class="s2">"/tmp/palette.png"</span>

<span class="nv">filters</span><span class="o">=</span><span class="s2">"fps=10,scale=480:-1:flags=lanczos"</span>

./record <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> 5 60 rgb.out

ffmpeg <span class="nt">-f</span> rawvideo <span class="nt">-pixel_format</span> rgb24 <span class="nt">-video_size</span> 640x480 <span class="nt">-framerate</span> 60 <span class="nt">-i</span> rgb.out <span class="nt">-vf</span> <span class="s2">"vflip"</span> video.mp4

ffmpeg <span class="nt">-v</span> warning <span class="nt">-i</span> video.mp4 <span class="nt">-vf</span> <span class="s2">"</span><span class="nv">$filters</span><span class="s2">,palettegen"</span> <span class="nt">-y</span> <span class="s2">"</span><span class="nv">$palette</span><span class="s2">"</span>
ffmpeg <span class="nt">-v</span> warning <span class="nt">-i</span> video.mp4 <span class="nt">-i</span> <span class="nv">$palette</span> <span class="nt">-lavfi</span> <span class="s2">"</span><span class="nv">$filters</span><span class="s2"> [x]; [x][1:v] paletteuse"</span> <span class="nt">-y</span> <span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span>

<span class="nb">rm </span>rgb.out video.mp4
</code></pre></div></div> <p>Save it as gif_script.sh and <code class="language-plaintext highlighter-rouge">chmod +x gif_script.sh</code></p> <p>To run it :</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ./gif_script.sh ../my_files/hello_mujoco.xml ../my_files/hello_mujoco.gif
</code></pre></div></div> <p>Thank you for taking your time to go through this. All the files used in this are uploaded in this Github Folder , You can go through them and create issues incase i’ve made a mistake or leave your feedback there.</p>]]></content><author><name>Aswinkumar</name></author><category term="[&quot;Robotics&quot;, &quot;MuJoCo&quot;, &quot;MuJoCo-Py&quot;, &quot;OpenAI&quot;]"/><summary type="html"><![CDATA[Hi ! Welcome to my Blog on MuJoCo. The Aim of this blog is to get people on-board MuJoCo in the least time possible. I am a Sophomore at a University, my Programming experience has been developed by looking at multiple example and reading code, but when it came to MuJoCo, the Documentation was very thorough yet i felt like i was lacking the basic skills to understand a lot of them initially and was very intimitated when i first came across it. So I set myself a goal to write MuJoCo blogs which would help people who love explanations through examples. But do remember , the blog is supposed to set a starting point and break the ice for people who do not have any major first hand experiences in robotic modelling , i refer the XML Reference all the time and once you get familiar and comfortable with the basic , do use the documentation to make sure you are exploiting all the features of MuJoCo.]]></summary></entry></feed>